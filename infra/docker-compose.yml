version: '3.8'
services:
  db:
    # High-performance PostGIS image with ARM64 support
    image: postgis/postgis:16-3.4-alpine
    platform: linux/arm64  # Explicitly specify ARM64 platform
    environment:
      POSTGRES_USER: nndr
      POSTGRES_PASSWORD: nndrpass
      POSTGRES_DB: nndr_db
      # Performance optimizations
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      # Memory and performance settings
      POSTGRES_SHARED_PRELOAD_LIBRARIES: "pg_stat_statements"
      # Connection settings
      POSTGRES_MAX_CONNECTIONS: "200"
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ../../setup/config/postgresql.conf:/etc/postgresql/postgresql.conf
      - ../../setup/config/postgresql.conf:/var/lib/postgresql/data/postgresql.conf
    command: >
      postgres 
      -c config_file=/etc/postgresql/postgresql.conf
      -c shared_preload_libraries=pg_stat_statements
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nndr -d nndr_db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Alternative: Use TimescaleDB with PostGIS for time-series optimization
  # Uncomment if you want time-series optimized database
  # db_timescale:
  #   image: timescale/timescaledb:latest-pg16
  #   platform: linux/arm64
  #   environment:
  #     POSTGRES_USER: nndr
  #     POSTGRES_PASSWORD: nndrpass
  #     POSTGRES_DB: nndr_db
  #     POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
  #   ports:
  #     - "5433:5432"
  #   volumes:
  #     - db_timescale_data:/var/lib/postgresql/data
  #     - ./setup/config/postgresql.conf:/etc/postgresql/postgresql.conf
  #   command: >
  #     postgres 
  #     -c config_file=/etc/postgresql/postgresql.conf
  #     -c shared_preload_libraries=timescaledb,pg_stat_statements
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U nndr -d nndr_db"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   restart: unless-stopped

# services:
  # backend:
  #   build:
  #     context: ./backend
  #   command: uvicorn app.main:app --host 0.0.0.0 --port 8000
  #   volumes:
  #     - ./backend:/app
  #   ports:
  #     - "8000:8000"
  # frontend:
  #   image: node:18
  #   working_dir: /app
  #   volumes:
  #     - ./frontend:/app
  #   command: sh -c "npm install && npm run dev"
  #   ports:
  #     - "3000:3000"

volumes:
  db_data:
    driver: local
  # db_timescale_data:
  #   driver: local
