# Working PostGIS ARM64 image using Ubuntu base
FROM ubuntu:22.04 AS base

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Install PostgreSQL and build dependencies
RUN apt-get update && apt-get install -y \
    postgresql-16 \
    postgresql-server-dev-16 \
    postgresql-contrib \
    build-essential \
    git \
    wget \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Install PostGIS dependencies
RUN apt-get update && apt-get install -y \
    libgeos-dev \
    libproj-dev \
    libgdal-dev \
    libjson-c-dev \
    libxml2-dev \
    libxslt-dev \
    libprotobuf-c-dev \
    libgeotiff-dev \
    libtiff-dev \
    libjpeg-dev \
    libpng-dev \
    libwebp-dev \
    zlib1g-dev \
    libbz2-dev \
    liblz4-dev \
    libzstd-dev \
    libssl-dev \
    libreadline-dev \
    libncurses-dev \
    libedit-dev \
    tcl-dev \
    tk-dev \
    uuid-dev \
    && rm -rf /var/lib/apt/lists/*

# Build PostGIS from source
FROM base AS postgis-builder

# Set build environment
ENV POSTGIS_VERSION=3.4.4
ENV POSTGIS_SHA256=9c0d7c41d7a39dc156c0e9d9aeeb4e4d83d5b609eac3c9c06f2c799d1f1b49c4

# Download and build PostGIS
WORKDIR /usr/src
RUN wget -O postgis.tar.gz "https://download.osgeo.org/postgis/source/postgis-${POSTGIS_VERSION}.tar.gz" \
    && echo "${POSTGIS_SHA256} *postgis.tar.gz" | sha256sum -c - \
    && tar -xzf postgis.tar.gz \
    && cd postgis-${POSTGIS_VERSION} \
    && ./configure \
        --prefix=/usr/local \
        --with-pgconfig=/usr/bin/pg_config \
        --with-geosconfig=/usr/bin/geos-config \
        --with-projdir=/usr \
        --with-gdalconfig=/usr/bin/gdal-config \
        --with-jsondir=/usr \
        --with-protobufdir=/usr \
        --with-libiconv=/usr \
        --with-libintl=/usr \
        --with-raster \
        --with-topology \
        --with-address-standardizer \
        --with-address-standardizer-extension \
        --with-extra-version=" (ARM64 Optimized)" \
    && make -j$(nproc) \
    && make install \
    && make comments-install \
    && cd .. \
    && rm -rf postgis-${POSTGIS_VERSION} postgis.tar.gz

# Build pg_stat_statements extension
RUN cd /usr/src \
    && git clone https://github.com/postgres/postgres.git \
    && cd postgres/contrib/pg_stat_statements \
    && make -j$(nproc) \
    && make install \
    && cd /usr/src \
    && rm -rf postgres

# Final stage
FROM ubuntu:22.04

# Prevent interactive prompts
ENV DEBIAN_FRONTEND=noninteractive

# Install PostgreSQL and runtime dependencies
RUN apt-get update && apt-get install -y \
    postgresql-16 \
    postgresql-contrib \
    libgeos-c1v5 \
    libproj22 \
    libgdal32 \
    libjson-c5 \
    libxml2 \
    libxslt1.1 \
    libprotobuf-c1 \
    libgeotiff5 \
    libtiff6 \
    libjpeg62-turbo \
    libpng16-16 \
    libwebp7 \
    zlib1g \
    libbz2-1.0 \
    liblz4-1 \
    libzstd1 \
    libssl3 \
    libreadline8 \
    libncurses6 \
    libedit2 \
    tcl \
    tk \
    uuid-runtime \
    && rm -rf /var/lib/apt/lists/*

# Copy PostGIS from builder
COPY --from=postgis-builder /usr/local/lib /usr/local/lib
COPY --from=postgis-builder /usr/local/share /usr/local/share
COPY --from=postgis-builder /usr/local/bin /usr/local/bin

# Copy pg_stat_statements
COPY --from=postgis-builder /usr/lib/postgresql /usr/lib/postgresql

# Set environment variables
ENV POSTGIS_ENABLE_OUTDB_RASTERS=1
ENV POSTGIS_GDAL_ENABLED_DRIVERS=ENABLE_ALL

# Create postgres user and set up directories
RUN useradd -m -s /bin/bash postgres \
    && mkdir -p /var/lib/postgresql/data \
    && chown -R postgres:postgres /var/lib/postgresql/data \
    && chmod 700 /var/lib/postgresql/data

# Don't initialize database during build - let it happen at runtime

# Set up PostGIS extensions and initialization
RUN echo "CREATE EXTENSION IF NOT EXISTS postgis;" > /docker-entrypoint-initdb.d/01-init-postgis.sql \
    && echo "CREATE EXTENSION IF NOT EXISTS postgis_topology;" >> /docker-entrypoint-initdb.d/01-init-postgis.sql \
    && echo "CREATE EXTENSION IF NOT EXISTS postgis_raster;" >> /docker-entrypoint-initdb.d/01-init-postgis.sql \
    && echo "CREATE EXTENSION IF NOT EXISTS address_standardizer;" >> /docker-entrypoint-initdb.d/01-init-postgis.sql \
    && echo "CREATE EXTENSION IF NOT EXISTS address_standardizer_data_us;" >> /docker-entrypoint-initdb.d/01-init-postgis.sql \
    && echo "CREATE EXTENSION IF NOT EXISTS pg_stat_statements;" >> /docker-entrypoint-initdb.d/01-init-postgis.sql \
    && echo "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";" >> /docker-entrypoint-initdb.d/01-init-postgis.sql \
    && echo "CREATE EXTENSION IF NOT EXISTS \"pg_trgm\";" >> /docker-entrypoint-initdb.d/01-init-postgis.sql \
    && echo "CREATE EXTENSION IF NOT EXISTS \"btree_gin\";" >> /docker-entrypoint-initdb.d/01-init-postgis.sql \
    && echo "CREATE EXTENSION IF NOT EXISTS \"btree_gist\";" >> /docker-entrypoint-initdb.d/01-init-postgis.sql

# Create a function to get PostGIS version info
RUN echo "CREATE OR REPLACE FUNCTION get_postgis_info() RETURNS TABLE(extension text, version text) AS \$\$ BEGIN RETURN QUERY SELECT 'PostGIS'::text, PostGIS_Version()::text UNION ALL SELECT 'PostGIS Scripts'::text, PostGIS_Scripts_Version()::text UNION ALL SELECT 'PostGIS Lib'::text, PostGIS_Lib_Version()::text UNION ALL SELECT 'GEOS'::text, PostGIS_GEOS_Version()::text UNION ALL SELECT 'PROJ'::text, PostGIS_PROJ_Version()::text UNION ALL SELECT 'GDAL'::text, PostGIS_GDAL_Version()::text; END; \$\$ LANGUAGE plpgsql;" > /docker-entrypoint-initdb.d/02-postgis-functions.sql

# Create a function to check spatial data integrity
RUN echo "CREATE OR REPLACE FUNCTION check_spatial_integrity() RETURNS TABLE(table_name text, column_name text, geometry_count bigint, invalid_count bigint) AS \$\$ BEGIN RETURN QUERY SELECT f_table_name::text, f_geometry_column::text, COUNT(*)::bigint as geometry_count, COUNT(*) FILTER (WHERE NOT ST_IsValid(geometry))::bigint as invalid_count FROM geometry_columns gc JOIN information_schema.tables t ON t.table_name = gc.f_table_name WHERE t.table_schema = 'public' GROUP BY f_table_name, f_geometry_column; END; \$\$ LANGUAGE plpgsql;" >> /docker-entrypoint-initdb.d/02-postgis-functions.sql

# Log successful initialization
RUN echo "DO \$\$ BEGIN RAISE NOTICE 'PostGIS extensions initialized successfully'; RAISE NOTICE 'PostGIS Version: %', PostGIS_Version(); RAISE NOTICE 'GEOS Version: %', PostGIS_GEOS_Version(); RAISE NOTICE 'PROJ Version: %', PostGIS_PROJ_Version(); END \$\$;" >> /docker-entrypoint-initdb.d/02-postgis-functions.sql

# Create startup script
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
# Check if database is already initialized\n\
if [ ! -f "/var/lib/postgresql/data/PG_VERSION" ]; then\n\
  echo "Initializing PostgreSQL database..."\n\
  su - postgres -c "initdb -D /var/lib/postgresql/data"\n\
fi\n\
\n\
# Start PostgreSQL\n\
su - postgres -c "pg_ctl -D /var/lib/postgresql/data -l /var/lib/postgresql/logfile start"\n\
\n\
# Wait for PostgreSQL to be ready\n\
until su - postgres -c "pg_isready"; do\n\
  echo "Waiting for PostgreSQL to be ready..."\n\
  sleep 2\n\
done\n\
\n\
# Run initialization scripts\n\
for script in /docker-entrypoint-initdb.d/*.sql; do\n\
  if [ -f "$script" ]; then\n\
    echo "Running $script..."\n\
    su - postgres -c "psql -f $script"\n\
  fi\n\
done\n\
\n\
# Keep container running\n\
tail -f /var/lib/postgresql/logfile' > /usr/local/bin/start-postgis.sh \
    && chmod +x /usr/local/bin/start-postgis.sh

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD su - postgres -c "pg_isready" || exit 1

# Expose port
EXPOSE 5432

# Set default command
CMD ["/usr/local/bin/start-postgis.sh"] 